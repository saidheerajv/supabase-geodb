{"remainingRequest":"/home/dheeraj/Desktop/new-supa/supabase-geodb/node_modules/babel-loader/lib/index.js!/home/dheeraj/Desktop/new-supa/supabase-geodb/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/dheeraj/Desktop/new-supa/supabase-geodb/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/dheeraj/Desktop/new-supa/supabase-geodb/src/components/PostLocation.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/dheeraj/Desktop/new-supa/supabase-geodb/src/components/PostLocation.vue","mtime":1633903654123},{"path":"/home/dheeraj/Desktop/new-supa/supabase-geodb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dheeraj/Desktop/new-supa/supabase-geodb/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/dheeraj/Desktop/new-supa/supabase-geodb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dheeraj/Desktop/new-supa/supabase-geodb/node_modules/vue-loader-v16/dist/index.js","mtime":1632349277000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL2RoZWVyYWovRGVza3RvcC9uZXctc3VwYS9zdXBhYmFzZS1nZW9kYi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMuanMiOwppbXBvcnQgeyBzdXBhYmFzZSB9IGZyb20gIi4uL3N1cGFiYXNlIjsKaW1wb3J0IHsgc3RvcmUgfSBmcm9tICIuLi9zdG9yZSI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiUG9zdExvY2F0aW9uIiwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgbmFtZTogIiIsCiAgICAgIGxvY19zdHJpbmc6ICIiLAogICAgICBkZXNjcmlwdGlvbjogIiIsCiAgICAgIHN1Y2Nlc3NBbGVydDogZmFsc2UsCiAgICAgIGVycm9yQWxlcnQ6IGZhbHNlCiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgcG9zdExpc3Rpbmc6IGZ1bmN0aW9uIHBvc3RMaXN0aW5nKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgY29vcmRzLCBkLCBpbnNlck9iaiwgX3lpZWxkJHN1cGFiYXNlJGZyb20kLCBlcnJvcjsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29vcmRzID0gX3RoaXMuZ2V0TGF0TG9uZyhfdGhpcy5sb2Nfc3RyaW5nKTsKICAgICAgICAgICAgICAgIGQgPSBuZXcgRGF0ZSgpOwogICAgICAgICAgICAgICAgaW5zZXJPYmogPSB7CiAgICAgICAgICAgICAgICAgIG5hbWU6IF90aGlzLm5hbWUsCiAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAiU1JJRD00MzI2O1BPSU5UKCIgKyBjb29yZHMubGF0ICsgIiAiICsgY29vcmRzLmxvbmcgKyAiKSIsCiAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBfdGhpcy5kZXNjcmlwdGlvbiwKICAgICAgICAgICAgICAgICAgdGFnczogInh5eiBhYmMiLAogICAgICAgICAgICAgICAgICBjb29yZHM6IEpTT04uc3RyaW5naWZ5KGNvb3JkcyksCiAgICAgICAgICAgICAgICAgIGNyZWF0ZWRfYXQ6IGQsCiAgICAgICAgICAgICAgICAgIHVwZGF0ZWRfYXQ6IGQsCiAgICAgICAgICAgICAgICAgIGFkZGVkX2J5OiBzdG9yZS51c2VyLmlkCiAgICAgICAgICAgICAgICB9OyAvLyBjb25zb2xlLmxvZyhkYXRhKTsKCiAgICAgICAgICAgICAgICBfdGhpcy5zdWNjZXNzQWxlcnQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIHN1cGFiYXNlLmZyb20oImFsbF9sb2NhdGlvbnMiKS5pbnNlcnQoW2luc2VyT2JqXSkuc2luZ2xlKCk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIF95aWVsZCRzdXBhYmFzZSRmcm9tJCA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICBlcnJvciA9IF95aWVsZCRzdXBhYmFzZSRmcm9tJC5lcnJvcjsKCiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhkYXRhLCBlcnJvcik7CiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgX3RoaXMuZXJyb3JBbGVydCA9IHRydWU7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBfdGhpcy5zdWNjZXNzQWxlcnQgPSB0cnVlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgZ2V0TGF0TG9uZzogZnVuY3Rpb24gZ2V0TGF0TG9uZyhzdHIpIHsKICAgICAgdmFyIHBhdHQxID0gL1srLV0/XGQrKFwuXGQrKT8vZzsKICAgICAgdmFyIHJlc3VsdCA9IHN0ci5tYXRjaChwYXR0MSk7CiAgICAgIHJlc3VsdCA9IHJlc3VsdC5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICByZXR1cm4gaXRlbS5sZW5ndGggPiA0ICYmIGl0ZW0uaW5jbHVkZXMoIi4iKTsKICAgICAgfSk7CiAgICAgIHJldHVybiB7CiAgICAgICAgbGF0OiByZXN1bHRbMF0sCiAgICAgICAgbG9uZzogcmVzdWx0WzFdCiAgICAgIH07CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["/home/dheeraj/Desktop/new-supa/supabase-geodb/src/components/PostLocation.vue"],"names":[],"mappings":";;;;;;;;;;AAmCA,SAAS,QAAT,QAAyB,aAAzB;AACA,SAAS,KAAT,QAAsB,UAAtB;AAEA,eAAe;AACb,EAAA,IAAI,EAAE,cADO;AAEb,EAAA,IAFa,kBAEN;AACL,WAAO;AACL,MAAA,IAAI,EAAE,EADD;AAEL,MAAA,UAAU,EAAE,EAFP;AAGL,MAAA,WAAW,EAAE,EAHR;AAIL,MAAA,YAAW,EAAI,KAJV;AAKL,MAAA,UAAS,EAAI;AALR,KAAP;AAOD,GAVY;AAWb,EAAA,OAAO,EAAE;AAED,IAAA,WAFC,yBAEa;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEd,gBAAA,MAFc,GAEL,KAAI,CAAC,UAAL,CAAgB,KAAI,CAAC,UAArB,CAFK;AAGd,gBAAA,CAHc,GAGV,IAAI,IAAJ,EAHU;AAKd,gBAAA,QALc,GAKH;AACb,kBAAA,IAAI,EAAE,KAAI,CAAC,IADE;AAEb,kBAAA,QAAQ,EAAE,qBAAqB,MAAM,CAAC,GAA5B,GAAkC,GAAlC,GAAwC,MAAM,CAAC,IAA/C,GAAsD,GAFnD;AAGb,kBAAA,WAAW,EAAE,KAAI,CAAC,WAHL;AAIb,kBAAA,IAAI,EAAE,SAJO;AAKb,kBAAA,MAAM,EAAE,IAAI,CAAC,SAAL,CAAe,MAAf,CALK;AAMb,kBAAA,UAAS,EAAI,CANA;AAOb,kBAAA,UAAS,EAAI,CAPA;AAQb,kBAAA,QAAO,EAAI,KAAK,CAAC,IAAN,CAAW;AART,iBALG,EAgBlB;;AACA,gBAAA,KAAI,CAAC,YAAL,GAAoB,KAApB;AAjBkB;AAAA,uBAmBM,QAAO,CAC5B,IADqB,CAChB,eADgB,EAErB,MAFqB,CAEd,CAAC,QAAD,CAFc,EAGrB,MAHqB,EAnBN;;AAAA;AAAA;AAmBV,gBAAA,KAnBU,yBAmBV,KAnBU;;AAwBlB;AACA,oBAAG,KAAH,EAAU;AACR,kBAAA,KAAI,CAAC,UAAL,GAAkB,IAAlB;AACF,iBAFA,MAEO;AACL,kBAAA,KAAI,CAAC,YAAL,GAAoB,IAApB;AACF;;AA7BkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BnB,KAjCM;AAmCP,IAAA,UAnCO,sBAmCI,GAnCJ,EAmCS;AAEd,UAAI,KAAI,GAAI,mBAAZ;AACA,UAAI,MAAK,GAAI,GAAG,CAAC,KAAJ,CAAU,KAAV,CAAb;AACA,MAAA,MAAK,GAAI,MAAM,CAAC,MAAP,CAAc,UAAC,IAAD,EAAU;AAC/B,eAAO,IAAI,CAAC,MAAL,GAAc,CAAd,IAAmB,IAAI,CAAC,QAAL,CAAc,GAAd,CAA1B;AACD,OAFQ,CAAT;AAIA,aAAO;AAAE,QAAA,GAAG,EAAE,MAAM,CAAC,CAAD,CAAb;AAAkB,QAAA,IAAI,EAAE,MAAM,CAAC,CAAD;AAA9B,OAAP;AACD;AA5CM;AAXI,CAAf","sourcesContent":["<template>\n<p class=\"alert alert-success\" v-if=\"successAlert\">\n  Added Listing successfully !\n</p>\n<p class=\"alert alert-warning\" v-if=\"errorAlert\">\n  Error Adding Listing ! Please try again. \n</p>\n  <div class=\"\">\n    <h3 class=\"text-dark mb-3\">Post Listing</h3>\n\n    <input class=\"form-control my-3\" v-model=\"name\" placeholder=\"Enter name\" />\n\n    <input\n      class=\"form-control my-3\"\n      v-model=\"loc_string\"\n      placeholder=\"Paste google maps url\"\n    />\n\n    <textarea\n      class=\"form-control my-3\"\n      v-model=\"description\"\n      placeholder=\"Description\"\n      rows=\"5\"\n    >\n    </textarea>\n\n    <div class=\"text-end\">\n      <button class=\"btn action-btn m-2 float-right\" @click=\"postListing\">\n        Add Listing\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { supabase } from \"../supabase\";\nimport { store } from \"../store\";\n\nexport default {\n  name: \"PostLocation\",\n  data() {\n    return {\n      name: \"\",\n      loc_string: \"\",\n      description: \"\",\n      successAlert : false, \n      errorAlert : false\n    };\n  },\n  methods: {\n    \n    async postListing() {\n\n      let coords = this.getLatLong(this.loc_string);\n      let d = new Date();\n\n      let inserObj = {\n        name: this.name,\n        location: \"SRID=4326;POINT(\" + coords.lat + \" \" + coords.long + \")\",\n        description: this.description,\n        tags: \"xyz abc\",\n        coords: JSON.stringify(coords),\n        created_at : d,\n        updated_at : d,\n        added_by : store.user.id\n      };\n\n      // console.log(data);\n      this.successAlert = false;\n\n      const { error } = await supabase\n        .from(\"all_locations\")\n        .insert([inserObj])\n        .single();\n\n      // console.log(data, error);\n      if(error) {\n        this.errorAlert = true;\n      } else {\n        this.successAlert = true;\n      }\n\n    },\n\n    getLatLong(str) {\n      \n      var patt1 = /[+-]?\\d+(\\.\\d+)?/g;\n      var result = str.match(patt1);\n      result = result.filter((item) => {\n        return item.length > 4 && item.includes(\".\");\n      });\n\n      return { lat: result[0], long: result[1] };\n    },\n  },\n};\n</script>\n\n\n<style scoped>\n.action-btn {\n  background-color: rgb(36, 180, 126);\n  color : #fff;\n}\n\n</style>\n"],"sourceRoot":""}]}