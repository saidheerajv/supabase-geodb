{"remainingRequest":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/thread-loader/dist/cjs.js!/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/babel-loader/lib/index.js!/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/src/components/GetLocations.vue?vue&type=template&id=63b34946","dependencies":[{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/src/components/GetLocations.vue","mtime":1633470727607},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1632349277000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/vue-loader-v16/dist/index.js","mtime":1632349277000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgdG9EaXNwbGF5U3RyaW5nIGFzIF90b0Rpc3BsYXlTdHJpbmcsIGNyZWF0ZUVsZW1lbnRWTm9kZSBhcyBfY3JlYXRlRWxlbWVudFZOb2RlLCB2TW9kZWxUZXh0IGFzIF92TW9kZWxUZXh0LCB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIHJlbmRlckxpc3QgYXMgX3JlbmRlckxpc3QsIEZyYWdtZW50IGFzIF9GcmFnbWVudCwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jayBhcyBfY3JlYXRlRWxlbWVudEJsb2NrLCByZXNvbHZlQ29tcG9uZW50IGFzIF9yZXNvbHZlQ29tcG9uZW50LCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tICJ2dWUiOwp2YXIgX2hvaXN0ZWRfMSA9IHsKICBjbGFzczogIm15LTEiCn07Cgp2YXIgX2hvaXN0ZWRfMiA9IC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJpbnB1dCIsIHsKICB0eXBlOiAidGV4dCIsCiAgY2xhc3M6ICJmb3JtLWNvbnRyb2wgbXktMyIsCiAgcGxhY2Vob2xkZXI6ICJTZWFyY2giCn0sIG51bGwsIC0xKTsKCnZhciBfaG9pc3RlZF8zID0gewogIGNsYXNzOiAiZmxvYXQtZW5kIgp9OwoKdmFyIF9ob2lzdGVkXzQgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaHIiLCBudWxsLCBudWxsLCAtMSk7CgpleHBvcnQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykgewogIHZhciBfY29tcG9uZW50X0xvY2F0aW9uQ2FyZCA9IF9yZXNvbHZlQ29tcG9uZW50KCJMb2NhdGlvbkNhcmQiKTsKCiAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygiZGl2IiwgX2hvaXN0ZWRfMSwgW19jcmVhdGVFbGVtZW50Vk5vZGUoInAiLCBudWxsLCAiQ3VycmVudCBMb2NhdGlvbiA6ICIgKyBfdG9EaXNwbGF5U3RyaW5nKCRkYXRhLmNvb3Jkcy5sYXRpdHVkZSkgKyAiLCAiICsgX3RvRGlzcGxheVN0cmluZygkZGF0YS5jb29yZHMubG9uZ2l0dWRlKSwgMSksIF9ob2lzdGVkXzIsIF9jcmVhdGVFbGVtZW50Vk5vZGUoImxhYmVsIiwgX2hvaXN0ZWRfMywgX3RvRGlzcGxheVN0cmluZygkZGF0YS5yYWRpaSksIDEpLCBfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaW5wdXQiLCB7CiAgICB0eXBlOiAicmFuZ2UiLAogICAgY2xhc3M6ICJmb3JtLXJhbmdlIiwKICAgIG1pbjogIjIiLAogICAgbWF4OiAiMTAwIiwKICAgIHN0ZXA6ICIxMCIsCiAgICBpZDogImttc1JhbmdlIiwKICAgICJvblVwZGF0ZTptb2RlbFZhbHVlIjogX2NhY2hlWzBdIHx8IChfY2FjaGVbMF0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgIHJldHVybiAkZGF0YS5yYWRpaSA9ICRldmVudDsKICAgIH0pLAogICAgb25DaGFuZ2U6IF9jYWNoZVsxXSB8fCAoX2NhY2hlWzFdID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gJG9wdGlvbnMucmFkaXVzQ2hhbmdlICYmICRvcHRpb25zLnJhZGl1c0NoYW5nZS5hcHBseSgkb3B0aW9ucywgYXJndW1lbnRzKTsKICAgIH0pCiAgfSwgbnVsbCwgNTQ0KSwgW1tfdk1vZGVsVGV4dCwgJGRhdGEucmFkaWldXSksIF9ob2lzdGVkXzQsIChfb3BlbkJsb2NrKHRydWUpLCBfY3JlYXRlRWxlbWVudEJsb2NrKF9GcmFnbWVudCwgbnVsbCwgX3JlbmRlckxpc3QoJGRhdGEuaXRlbXMsIGZ1bmN0aW9uIChpdGVtKSB7CiAgICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKCJkaXYiLCB7CiAgICAgIGtleTogaXRlbS5pZAogICAgfSwgW19jcmVhdGVWTm9kZShfY29tcG9uZW50X0xvY2F0aW9uQ2FyZCwgewogICAgICBsb2M6IGl0ZW0KICAgIH0sIG51bGwsIDgsIFsibG9jIl0pXSk7CiAgfSksIDEyOCkpXSk7Cn0="},{"version":3,"sources":["/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/src/components/GetLocations.vue"],"names":[],"mappings":";;AACO,EAAA,KAAK,EAAC;;;8BAET,mBAAA,CAAoE,OAApE,EAAoE;AAA7D,EAAA,IAAI,EAAC,MAAwD;AAAjD,EAAA,KAAK,EAAC,mBAA2C;AAAvB,EAAA,WAAW,EAAC;AAAW,CAApE,E,IAAA,E,EAAA,C;;;AACO,EAAA,KAAK,EAAC;;;8BAWb,mBAAA,CAAM,IAAN,EAAM,IAAN,EAAM,IAAN,EAAM,CAAA,CAAN,C;;;;;uBAdF,mBAAA,CAkBM,KAlBN,EAAA,UAAA,EAkBM,CAjBJ,mBAAA,CAAuE,GAAvE,EAAuE,IAAvE,EAAG,wBAAmB,gBAAA,CAAG,KAAA,CAAA,MAAA,CAAO,QAAV,CAAnB,GAAwC,IAAxC,GAA0C,gBAAA,CAAG,KAAA,CAAA,MAAA,CAAO,SAAV,CAA7C,EAAgE,CAAhE,CAiBI,EAhBJ,UAgBI,EAfJ,mBAAA,CAA6C,OAA7C,EAAA,UAAA,EAA6C,gBAAA,CAAhB,KAAA,CAAA,KAAgB,CAA7C,EAAkC,CAAlC,CAeI,E,gBAdJ,mBAAA,CASE,OATF,EASE;AARA,IAAA,IAAI,EAAC,OAQL;AAPA,IAAA,KAAK,EAAC,YAON;AANA,IAAA,GAAG,EAAC,GAMJ;AALA,IAAA,GAAG,EAAC,KAKJ;AAJA,IAAA,IAAI,EAAC,IAIL;AAHA,IAAA,EAAE,EAAC,UAGH;;aAFS,KAAA,CAAA,K,GAAK,M;MAEd;AADC,IAAA,QAAM,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,YAAA,IAAA,QAAA,CAAA,YAAA,OAAA,QAAA,YAAF;AAAA,KAAA;AACP,GATF,E,IAAA,E,GAAA,C,iBAOW,KAAA,CAAA,K,GAOP,EAJJ,UAII,G,kBAHJ,mBAAA,CAEM,SAFN,EAEM,IAFN,EAEM,WAAA,CAFc,KAAA,CAAA,KAEd,EAFmB,UAAb,IAAa,EAAT;yBAAhB,mBAAA,CAEM,KAFN,EAEM;AAFsB,MAAA,GAAG,EAAE,IAAI,CAAC;AAEhC,KAFN,E,CACE,YAAA,CAA4B,uBAA5B,EAA4B;AAAb,MAAA,GAAG,EAAE;AAAQ,KAA5B,EAAwB,IAAxB,EAAwB,CAAxB,EAAwB,CAAA,KAAA,CAAxB,C,CADF,C;GAEM,CAFN,E,GAAA,CAGI,EAlBN,C","sourcesContent":["<template>\n  <div class=\"my-1\">\n    <p>Current Location : {{ coords.latitude }}, {{ coords.longitude }}</p>\n    <input type=\"text\" class=\"form-control my-3\" placeholder=\"Search\" />\n    <label class=\"float-end\"> {{ radii }}</label>\n    <input\n      type=\"range\"\n      class=\"form-range\"\n      min=\"2\"\n      max=\"100\"\n      step=\"10\"\n      id=\"kmsRange\"\n      v-model=\"radii\"\n      @change=\"radiusChange\"\n    />\n    <hr />\n    <div v-for=\"item in items\" :key=\"item.id\">\n      <LocationCard :loc=\"item\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { supabase } from \"../supabase\";\nimport LocationCard from \"./LocationCard.vue\";\n\nconst allTodos = [];\n\nexport default {\n  name: \"GetLocations\",\n  components: {\n    LocationCard,\n  },\n  data() {\n    return {\n      navigatorError: false,\n      coords: {},\n      items: [],\n      radii: 20,\n    };\n  },\n  created() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.showPosition);\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  },\n\n  methods: {\n    radiusChange() {\n      console.log(this.radii);\n      this.getLocations(this.coords, this.radii);\n    },\n    showPosition(position) {\n      this.coords = position.coords;\n      this.getLocations(this.coords, 100);\n    },\n    async getLocations(position, radius = 100) {\n      console.log(position, radius);\n      const { data: todos, error } = await supabase.rpc(\"get_all_locations\", {\n        radius: radius,\n        point:\n          \"SRID=4326;POINT(\" +\n          position.latitude +\n          \" \" +\n          position.longitude +\n          \")\",\n      });\n      if (error) {\n        console.log(\"error\", error);\n        return;\n      }\n      // handle for when no todos are returned\n      if (todos === null) {\n        allTodos.value = [];\n        return;\n      }\n      this.items = todos;\n      console.log(this.items);\n    },\n  },\n};\n</script>\n\n<style scoped>\n</style>\n"],"sourceRoot":""}]}