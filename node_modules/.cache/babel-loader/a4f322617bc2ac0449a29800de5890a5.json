{"remainingRequest":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/babel-loader/lib/index.js!/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/src/components/PostLocation.vue?vue&type=template&id=e41363b6&scoped=true","dependencies":[{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/src/components/PostLocation.vue","mtime":1633900624464},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1632349277000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/vue-loader-v16/dist/index.js","mtime":1632349277000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbi5qcyI7CmltcG9ydCB7IG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUsIGNyZWF0ZUVsZW1lbnRWTm9kZSBhcyBfY3JlYXRlRWxlbWVudFZOb2RlLCB2TW9kZWxUZXh0IGFzIF92TW9kZWxUZXh0LCB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIEZyYWdtZW50IGFzIF9GcmFnbWVudCwgcHVzaFNjb3BlSWQgYXMgX3B1c2hTY29wZUlkLCBwb3BTY29wZUlkIGFzIF9wb3BTY29wZUlkIH0gZnJvbSAidnVlIjsKCnZhciBfd2l0aFNjb3BlSWQgPSBmdW5jdGlvbiBfd2l0aFNjb3BlSWQobikgewogIHJldHVybiBfcHVzaFNjb3BlSWQoImRhdGEtdi1lNDEzNjNiNiIpLCBuID0gbigpLCBfcG9wU2NvcGVJZCgpLCBuOwp9OwoKdmFyIF9ob2lzdGVkXzEgPSB7CiAga2V5OiAwLAogIGNsYXNzOiAiYWxlcnQgYWxlcnQtc3VjY2VzcyIKfTsKdmFyIF9ob2lzdGVkXzIgPSB7CiAga2V5OiAxLAogIGNsYXNzOiAiYWxlcnQgYWxlcnQtd2FybmluZyIKfTsKdmFyIF9ob2lzdGVkXzMgPSB7CiAgY2xhc3M6ICIiCn07Cgp2YXIgX2hvaXN0ZWRfNCA9IC8qI19fUFVSRV9fKi9fd2l0aFNjb3BlSWQoZnVuY3Rpb24gKCkgewogIHJldHVybiAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaDMiLCB7CiAgICBjbGFzczogInRleHQtZGFyayBtYi0zIgogIH0sICJQb3N0IExpc3RpbmciLCAtMQogIC8qIEhPSVNURUQgKi8KICApOwp9KTsKCnZhciBfaG9pc3RlZF81ID0gewogIGNsYXNzOiAidGV4dC1lbmQiCn07CmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7CiAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhfRnJhZ21lbnQsIG51bGwsIFskZGF0YS5zdWNjZXNzQWxlcnQgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKCJwIiwgX2hvaXN0ZWRfMSwgIiBBZGRlZCBMaXN0aW5nIHN1Y2Nlc3NmdWxseSAhICIpKSA6IF9jcmVhdGVDb21tZW50Vk5vZGUoInYtaWYiLCB0cnVlKSwgJGRhdGEuZXJyb3JBbGVydCA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soInAiLCBfaG9pc3RlZF8yLCAiIEVycm9yIEFkZGluZyBMaXN0aW5nICEgUGxlYXNlIHRyeSBhZ2Fpbi4gIikpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgidi1pZiIsIHRydWUpLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8zLCBbX2hvaXN0ZWRfNCwgX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVFbGVtZW50Vk5vZGUoImlucHV0IiwgewogICAgY2xhc3M6ICJmb3JtLWNvbnRyb2wgbXktMiIsCiAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVswXSB8fCAoX2NhY2hlWzBdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICByZXR1cm4gJGRhdGEubmFtZSA9ICRldmVudDsKICAgIH0pLAogICAgcGxhY2Vob2xkZXI6ICJFbnRlciBuYW1lIgogIH0sIG51bGwsIDUxMgogIC8qIE5FRURfUEFUQ0ggKi8KICApLCBbW192TW9kZWxUZXh0LCAkZGF0YS5uYW1lXV0pLCBfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaW5wdXQiLCB7CiAgICBjbGFzczogImZvcm0tY29udHJvbCBteS0yIiwKICAgICJvblVwZGF0ZTptb2RlbFZhbHVlIjogX2NhY2hlWzFdIHx8IChfY2FjaGVbMV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgIHJldHVybiAkZGF0YS5sb2Nfc3RyaW5nID0gJGV2ZW50OwogICAgfSksCiAgICBwbGFjZWhvbGRlcjogIlBhc3RlIGdvb2dsZSBtYXBzIHVybCIKICB9LCBudWxsLCA1MTIKICAvKiBORUVEX1BBVENIICovCiAgKSwgW1tfdk1vZGVsVGV4dCwgJGRhdGEubG9jX3N0cmluZ11dKSwgX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVFbGVtZW50Vk5vZGUoInRleHRhcmVhIiwgewogICAgY2xhc3M6ICJmb3JtLWNvbnRyb2wgbXktMiIsCiAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVsyXSB8fCAoX2NhY2hlWzJdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICByZXR1cm4gJGRhdGEuZGVzY3JpcHRpb24gPSAkZXZlbnQ7CiAgICB9KSwKICAgIHBsYWNlaG9sZGVyOiAiRGVzY3JpcHRpb24iCiAgfSwgIlxuICAgICIsIDUxMgogIC8qIE5FRURfUEFUQ0ggKi8KICApLCBbW192TW9kZWxUZXh0LCAkZGF0YS5kZXNjcmlwdGlvbl1dKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfNSwgW19jcmVhdGVFbGVtZW50Vk5vZGUoImJ1dHRvbiIsIHsKICAgIGNsYXNzOiAiYnRuIGFjdGlvbi1idG4gbS0yIGZsb2F0LXJpZ2h0IiwKICAgIG9uQ2xpY2s6IF9jYWNoZVszXSB8fCAoX2NhY2hlWzNdID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gJG9wdGlvbnMucG9zdExpc3RpbmcgJiYgJG9wdGlvbnMucG9zdExpc3RpbmcuYXBwbHkoJG9wdGlvbnMsIGFyZ3VtZW50cyk7CiAgICB9KQogIH0sICIgQWRkIExpc3RpbmcgIildKV0pXSwgNjQKICAvKiBTVEFCTEVfRlJBR01FTlQgKi8KICApOwp9"},{"version":3,"sources":["/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/src/components/PostLocation.vue"],"names":[],"mappings":";;;;;;;;;;;AACG,EAAA,KAAK,EAAC;;;;AAGN,EAAA,KAAK,EAAC;;;AAGF,EAAA,KAAK,EAAC;;;;sBACT,mBAAA,CAA4C,IAA5C,EAA4C;AAAxC,IAAA,KAAK,EAAC;AAAkC,GAA5C,EAA2B,cAA3B,EAAuC,CAAA;AAAA;AAAvC,G;;;;AAiBK,EAAA,KAAK,EAAC;;;6DAxBsB,KAAA,CAAA,Y,kBAArC,mBAAA,CAEI,GAFJ,EAAA,UAAA,EAAmD,gCAAnD,C,uCAGqC,KAAA,CAAA,U,kBAArC,mBAAA,CAEI,GAFJ,EAAA,UAAA,EAAiD,4CAAjD,C,uCAGE,mBAAA,CAuBM,KAvBN,EAAA,UAAA,EAuBM,CAtBJ,UAsBI,E,gBApBJ,mBAAA,CAA2E,OAA3E,EAA2E;AAApE,IAAA,KAAK,EAAC,mBAA8D;;aAAjC,KAAA,CAAA,I,GAAI,M;MAA6B;AAA3B,IAAA,WAAW,EAAC;AAAe,GAA3E,E,IAAA,E;;AAAA,G,iBAA0C,KAAA,CAAA,I,GAoBtC,E,gBAlBJ,mBAAA,CAIE,OAJF,EAIE;AAHA,IAAA,KAAK,EAAC,mBAGN;;aAFS,KAAA,CAAA,U,GAAU,M;MAEnB;AADA,IAAA,WAAW,EAAC;AACZ,GAJF,E,IAAA,E;;AAAA,G,iBAEW,KAAA,CAAA,U,GAgBP,E,gBAZJ,mBAAA,CAKW,UALX,EAKW;AAJT,IAAA,KAAK,EAAC,mBAIG;;aAHA,KAAA,CAAA,W,GAAW,M;MAGX;AAFT,IAAA,WAAW,EAAC;AAEH,GALX,EAIC,QAJD,EAKA;AAAA;AALA,G,EAKA,C,cAHW,KAAA,CAAA,W,CAGX,C,CAOI,EALJ,mBAAA,CAIM,KAJN,EAAA,UAAA,EAIM,CAHJ,mBAAA,CAES,QAFT,EAES;AAFD,IAAA,KAAK,EAAC,gCAEL;AAFuC,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,WAAA,IAAA,QAAA,CAAA,WAAA,OAAA,QAAA,YAAF;AAAA,KAAA;AAE5C,GAFT,EAAoE,eAApE,CAGI,CAJN,CAKI,CAvBN,C","sourcesContent":["<template>\n<p class=\"alert alert-success\" v-if=\"successAlert\">\n  Added Listing successfully !\n</p>\n<p class=\"alert alert-warning\" v-if=\"errorAlert\">\n  Error Adding Listing ! Please try again. \n</p>\n  <div class=\"\">\n    <h3 class=\"text-dark mb-3\">Post Listing</h3>\n\n    <input class=\"form-control my-2\" v-model=\"name\" placeholder=\"Enter name\" />\n\n    <input\n      class=\"form-control my-2\"\n      v-model=\"loc_string\"\n      placeholder=\"Paste google maps url\"\n    />\n\n    <textarea\n      class=\"form-control my-2\"\n      v-model=\"description\"\n      placeholder=\"Description\"\n    >\n    </textarea>\n\n    <div class=\"text-end\">\n      <button class=\"btn action-btn m-2 float-right\" @click=\"postListing\">\n        Add Listing\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { supabase } from \"../supabase\";\nimport { store } from \"../store\";\n\nexport default {\n  name: \"PostLocation\",\n  data() {\n    return {\n      name: \"\",\n      loc_string: \"\",\n      description: \"\",\n      successAlert : false, \n      errorAlert : false\n    };\n  },\n  methods: {\n    \n    async postListing() {\n\n      let coords = this.getLatLong(this.loc_string);\n      let d = new Date();\n\n      let inserObj = {\n        name: this.name,\n        location: \"SRID=4326;POINT(\" + coords.lat + \" \" + coords.long + \")\",\n        description: this.description,\n        tags: \"xyz abc\",\n        coords: JSON.stringify(coords),\n        created_at : d,\n        updated_at : d,\n        added_by : store.user.id\n      };\n\n      // console.log(data);\n      this.successAlert = false;\n\n      const { error } = await supabase\n        .from(\"all_locations\")\n        .insert([inserObj])\n        .single();\n\n      // console.log(data, error);\n      if(error) {\n        this.errorAlert = true;\n      } else {\n        this.successAlert = true;\n      }\n\n    },\n\n    getLatLong(str) {\n      \n      var patt1 = /[+-]?\\d+(\\.\\d+)?/g;\n      var result = str.match(patt1);\n      result = result.filter((item) => {\n        return item.length > 4 && item.includes(\".\");\n      });\n\n      return { lat: result[0], long: result[1] };\n    },\n  },\n};\n</script>\n\n\n<style scoped>\n.action-btn {\n  background-color: rgb(36, 180, 126);\n  color : #fff;\n}\n\n</style>\n"],"sourceRoot":""}]}