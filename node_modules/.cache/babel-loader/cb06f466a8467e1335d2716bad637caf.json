{"remainingRequest":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/thread-loader/dist/cjs.js!/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/babel-loader/lib/index.js!/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/src/App.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/src/App.vue","mtime":1633379620956},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/vue-loader-v16/dist/index.js","mtime":1632349277000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL2RoZWVyYWovRGVza3RvcC9zdXBhL3N1cGFiYXNlLWdlb2RiL3NiZ2VvZGIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5tYXRjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgSGVsbG9Xb3JsZCBmcm9tICIuL2NvbXBvbmVudHMvSGVsbG9Xb3JsZC52dWUiOwppbXBvcnQgUG9zdExvY2F0aW9uIGZyb20gIi4vY29tcG9uZW50cy9Qb3N0TG9jYXRpb24udnVlIjsKaW1wb3J0IEdldExvY2F0aW9ucyBmcm9tICIuL2NvbXBvbmVudHMvR2V0TG9jYXRpb25zLnZ1ZSI7CmltcG9ydCB7IHN1cGFiYXNlIH0gZnJvbSAiLi9zdXBhYmFzZS5qcyI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiQXBwIiwKICBjb21wb25lbnRzOiB7CiAgICBIZWxsb1dvcmxkOiBIZWxsb1dvcmxkLAogICAgUG9zdExvY2F0aW9uOiBQb3N0TG9jYXRpb24sCiAgICBHZXRMb2NhdGlvbnM6IEdldExvY2F0aW9ucwogIH0sCiAgbWV0aG9kczogewogICAgZmluZEFuZFNldDogZnVuY3Rpb24gZmluZEFuZFNldCgpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgX3lpZWxkJHN1cGFiYXNlJGZyb20kLCBkYXRhLCBlcnJvcjsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29uc29sZS5sb2coIkNhbGxlZCIpOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gc3VwYWJhc2UuZnJvbSgiYWxsX2xvY2F0aW9ucyIpLmluc2VydChbewogICAgICAgICAgICAgICAgICBuYW1lOiAiVGhlIFNoaXJlIiwKICAgICAgICAgICAgICAgICAgbG9jYXRpb246ICJTUklEPTQzMjY7UE9JTlQoMTcuNTAwMjA3MiA3OC4zMjczMjM4KSIsCiAgICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgICAgICAgICAgICB4OiAiWFlaIiwKICAgICAgICAgICAgICAgICAgICB5OiAiQUJDIgogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgdGFnczogInh5eiBhYmMiCiAgICAgICAgICAgICAgICB9XSkuc2luZ2xlKCk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIF95aWVsZCRzdXBhYmFzZSRmcm9tJCA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICBkYXRhID0gX3lpZWxkJHN1cGFiYXNlJGZyb20kLmRhdGE7CiAgICAgICAgICAgICAgICBlcnJvciA9IF95aWVsZCRzdXBhYmFzZSRmcm9tJC5lcnJvcjsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEsIGVycm9yKTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGdldExvY2F0aW9uczogZnVuY3Rpb24gZ2V0TG9jYXRpb25zKCkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICB2YXIgX3lpZWxkJHN1cGFiYXNlJHJwYywgZGF0YSwgZXJyb3I7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gc3VwYWJhc2UucnBjKCJnZXRfYWxsX2xvY3MiKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgX3lpZWxkJHN1cGFiYXNlJHJwYyA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgZGF0YSA9IF95aWVsZCRzdXBhYmFzZSRycGMuZGF0YTsKICAgICAgICAgICAgICAgIGVycm9yID0gX3lpZWxkJHN1cGFiYXNlJHJwYy5lcnJvcjsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEsIGVycm9yKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgZ2V0TGF0TG9uZzogZnVuY3Rpb24gZ2V0TGF0TG9uZyhzdHIpIHsKICAgICAgdmFyIHBhdHQxID0gL1srLV0/XGQrKFwuXGQrKT8vZzsKICAgICAgdmFyIHJlc3VsdCA9IHN0ci5tYXRjaChwYXR0MSk7CiAgICAgIHJlc3VsdCA9IHJlc3VsdC5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICByZXR1cm4gaXRlbS5sZW5ndGggPiA0ICYmIGl0ZW0uaW5jbHVkZXMoIi4iKTsKICAgICAgfSk7CiAgICAgIHJldHVybiBbcmVzdWx0WzBdLCByZXN1bHRbMV1dOwogICAgfQogIH0KfTs="},{"version":3,"sources":["/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/src/App.vue"],"names":[],"mappings":";;;;;;;AAiBA,OAAO,UAAP,MAAuB,6BAAvB;AACA,OAAO,YAAP,MAAyB,+BAAzB;AACA,OAAO,YAAP,MAAyB,+BAAzB;AACA,SAAS,QAAT,QAAyB,eAAzB;AAEA,eAAe;AACb,EAAA,IAAI,EAAE,KADO;AAEb,EAAA,UAAU,EAAE;AACV,IAAA,UAAU,EAAV,UADU;AAEV,IAAA,YAAY,EAAZ,YAFU;AAGV,IAAA,YAAY,EAAZ;AAHU,GAFC;AAOb,EAAA,OAAO,EAAE;AACD,IAAA,UADC,wBACY;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACjB,gBAAA,OAAO,CAAC,GAAR,CAAY,QAAZ;AADiB;AAAA,uBAEa,QAAO,CAClC,IAD2B,CACtB,eADsB,EAE3B,MAF2B,CAEpB,CACN;AACE,kBAAA,IAAI,EAAE,WADR;AAEE,kBAAA,QAAQ,EAAE,wCAFZ;AAGE,kBAAA,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe;AAAE,oBAAA,CAAC,EAAE,KAAL;AAAY,oBAAA,CAAC,EAAE;AAAf,mBAAf,CAHR;AAIE,kBAAA,IAAI,EAAE;AAJR,iBADM,CAFoB,EAU3B,MAV2B,EAFb;;AAAA;AAAA;AAET,gBAAA,IAFS,yBAET,IAFS;AAEH,gBAAA,KAFG,yBAEH,KAFG;AAajB,gBAAA,OAAO,CAAC,GAAR,CAAY,IAAZ,EAAkB,KAAlB;;AAbiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAclB,KAfM;AAgBD,IAAA,YAhBC,0BAgBc;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACW,QAAQ,CAAC,GAAT,CAAa,cAAb,CADX;;AAAA;AAAA;AACX,gBAAA,IADW,uBACX,IADW;AACL,gBAAA,KADK,uBACL,KADK;AAGnB,gBAAA,OAAO,CAAC,GAAR,CAAY,IAAZ,EAAkB,KAAlB;;AAHmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIpB,KApBM;AAqBP,IAAA,UArBO,sBAqBI,GArBJ,EAqBS;AACd,UAAI,KAAI,GAAI,mBAAZ;AACA,UAAI,MAAK,GAAI,GAAG,CAAC,KAAJ,CAAU,KAAV,CAAb;AACA,MAAA,MAAK,GAAI,MAAM,CAAC,MAAP,CAAc,UAAC,IAAD,EAAU;AAC/B,eAAO,IAAI,CAAC,MAAL,GAAc,CAAd,IAAmB,IAAI,CAAC,QAAL,CAAc,GAAd,CAA1B;AACD,OAFQ,CAAT;AAIA,aAAO,CAAC,MAAM,CAAC,CAAD,CAAP,EAAY,MAAM,CAAC,CAAD,CAAlB,CAAP;AACD;AA7BM;AAPI,CAAf","sourcesContent":["<template>\n  <HelloWorld />\n\n  <div class=\"container mt-3\">\n    <div class=\"row\">\n      <div class=\"col-sm-6 border-right-1\">\n        <GetLocations />\n      </div>\n\n      <div class=\"col-sm-6\">\n        <PostLocation />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport HelloWorld from \"./components/HelloWorld.vue\";\nimport PostLocation from \"./components/PostLocation.vue\";\nimport GetLocations from \"./components/GetLocations.vue\";\nimport { supabase } from \"./supabase.js\";\n\nexport default {\n  name: \"App\",\n  components: {\n    HelloWorld,\n    PostLocation,\n    GetLocations,\n  },\n  methods: {\n    async findAndSet() {\n      console.log(\"Called\");\n      const { data, error } = await supabase\n        .from(\"all_locations\")\n        .insert([\n          {\n            name: \"The Shire\",\n            location: \"SRID=4326;POINT(17.5002072 78.3273238)\",\n            data: JSON.stringify({ x: \"XYZ\", y: \"ABC\" }),\n            tags: \"xyz abc\",\n          },\n        ])\n        .single();\n      console.log(data, error);\n    },\n    async getLocations() {\n      const { data, error } = await supabase.rpc(\"get_all_locs\");\n\n      console.log(data, error);\n    },\n    getLatLong(str) {\n      var patt1 = /[+-]?\\d+(\\.\\d+)?/g;\n      var result = str.match(patt1);\n      result = result.filter((item) => {\n        return item.length > 4 && item.includes(\".\");\n      });\n\n      return [result[0], result[1]];\n    },\n  },\n};\n</script>\n\n<style>\n#app {\n}\n</style>\n"],"sourceRoot":""}]}