{"remainingRequest":"/home/dheeraj/Desktop/new-supa/supabase-geodb/node_modules/babel-loader/lib/index.js!/home/dheeraj/Desktop/new-supa/supabase-geodb/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/dheeraj/Desktop/new-supa/supabase-geodb/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/dheeraj/Desktop/new-supa/supabase-geodb/src/components/GetLocations.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/dheeraj/Desktop/new-supa/supabase-geodb/src/components/GetLocations.vue","mtime":1633903654119},{"path":"/home/dheeraj/Desktop/new-supa/supabase-geodb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dheeraj/Desktop/new-supa/supabase-geodb/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/dheeraj/Desktop/new-supa/supabase-geodb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dheeraj/Desktop/new-supa/supabase-geodb/node_modules/vue-loader-v16/dist/index.js","mtime":1632349277000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL2RoZWVyYWovRGVza3RvcC9uZXctc3VwYS9zdXBhYmFzZS1nZW9kYi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCB7IHN1cGFiYXNlIH0gZnJvbSAiLi4vc3VwYWJhc2UiOwppbXBvcnQgTGlzdGluZ0NhcmQgZnJvbSAiLi9MaXN0aW5nQ2FyZC52dWUiOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIkdldFVzZXJMaXN0aW5ncyIsCiAgY29tcG9uZW50czogewogICAgTGlzdGluZ0NhcmQ6IExpc3RpbmdDYXJkCiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgbmF2aWdhdG9yRXJyb3I6IGZhbHNlLAogICAgICBjb29yZHM6IHt9LAogICAgICBpdGVtczogW10sCiAgICAgIHJhZGlpOiAyMAogICAgfTsKICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICBpZiAobmF2aWdhdG9yLmdlb2xvY2F0aW9uKSB7CiAgICAgIG5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24odGhpcy5zaG93UG9zaXRpb24pOwogICAgfSBlbHNlIHsKICAgICAgY29uc29sZS5sb2coIkdlb2xvY2F0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyLiIpOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgcmFkaXVzQ2hhbmdlOiBmdW5jdGlvbiByYWRpdXNDaGFuZ2UoKSB7CiAgICAgIGNvbnNvbGUubG9nKHRoaXMucmFkaWkpOwogICAgICB0aGlzLmdldExvY2F0aW9ucyh0aGlzLmNvb3JkcywgdGhpcy5yYWRpaSk7CiAgICB9LAogICAgc2hvd1Bvc2l0aW9uOiBmdW5jdGlvbiBzaG93UG9zaXRpb24ocG9zaXRpb24pIHsKICAgICAgdGhpcy5jb29yZHMgPSBwb3NpdGlvbi5jb29yZHM7CiAgICAgIHRoaXMuZ2V0TG9jYXRpb25zKHRoaXMuY29vcmRzLCAxMDApOwogICAgfSwKICAgIGdldExvY2F0aW9uczogZnVuY3Rpb24gZ2V0TG9jYXRpb25zKHBvc2l0aW9uKSB7CiAgICAgIHZhciBfYXJndW1lbnRzID0gYXJndW1lbnRzLAogICAgICAgICAgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgcmFkaXVzLCBfeWllbGQkc3VwYWJhc2UkcnBjLCBsaXN0aW5ncywgZXJyb3I7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJhZGl1cyA9IF9hcmd1bWVudHMubGVuZ3RoID4gMSAmJiBfYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBfYXJndW1lbnRzWzFdIDogMTAwOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gc3VwYWJhc2UucnBjKCJnZXRfbGlzdGluZ3MiLCB7CiAgICAgICAgICAgICAgICAgIHJhZGl1czogcmFkaXVzLAogICAgICAgICAgICAgICAgICBwb2ludDogIlNSSUQ9NDMyNjtQT0lOVCgiICsgcG9zaXRpb24ubGF0aXR1ZGUgKyAiICIgKyBwb3NpdGlvbi5sb25naXR1ZGUgKyAiKSIKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBfeWllbGQkc3VwYWJhc2UkcnBjID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIGxpc3RpbmdzID0gX3lpZWxkJHN1cGFiYXNlJHJwYy5kYXRhOwogICAgICAgICAgICAgICAgZXJyb3IgPSBfeWllbGQkc3VwYWJhc2UkcnBjLmVycm9yOwoKICAgICAgICAgICAgICAgIGlmICghZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJlcnJvciIsIGVycm9yKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBpZiAoIShsaXN0aW5ncyA9PT0gbnVsbCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBsaXN0aW5ncy52YWx1ZSA9IFtdOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgICBfdGhpcy5pdGVtcyA9IGxpc3RpbmdzOwoKICAgICAgICAgICAgICAgIF90aGlzLml0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgaXRlbS5jb29yZHMgPSBKU09OLnBhcnNlKGl0ZW0uY29vcmRzKTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKSgpOwogICAgfQogIH0KfTs="},{"version":3,"sources":["/home/dheeraj/Desktop/new-supa/supabase-geodb/src/components/GetLocations.vue"],"names":[],"mappings":";;;AAiCA,SAAS,QAAT,QAAyB,aAAzB;AACA,OAAO,WAAP,MAAwB,mBAAxB;AAEA,eAAe;AACb,EAAA,IAAI,EAAE,iBADO;AAEb,EAAA,UAAU,EAAE;AACV,IAAA,WAAW,EAAX;AADU,GAFC;AAKb,EAAA,IALa,kBAKN;AACL,WAAO;AACL,MAAA,cAAc,EAAE,KADX;AAEL,MAAA,MAAM,EAAE,EAFH;AAGL,MAAA,KAAK,EAAE,EAHF;AAIL,MAAA,KAAK,EAAE;AAJF,KAAP;AAMD,GAZY;AAab,EAAA,OAba,qBAaH;AACR,QAAI,SAAS,CAAC,WAAd,EAA2B;AACzB,MAAA,SAAS,CAAC,WAAV,CAAsB,kBAAtB,CAAyC,KAAK,YAA9C;AACF,KAFA,MAEO;AACL,MAAA,OAAO,CAAC,GAAR,CAAY,+CAAZ;AACF;AACD,GAnBY;AAqBb,EAAA,OAAO,EAAE;AACP,IAAA,YADO,0BACQ;AACb,MAAA,OAAO,CAAC,GAAR,CAAY,KAAK,KAAjB;AACA,WAAK,YAAL,CAAkB,KAAK,MAAvB,EAA+B,KAAK,KAApC;AACD,KAJM;AAKP,IAAA,YALO,wBAKM,QALN,EAKgB;AACrB,WAAK,MAAL,GAAc,QAAQ,CAAC,MAAvB;AACA,WAAK,YAAL,CAAkB,KAAK,MAAvB,EAA+B,GAA/B;AACD,KARM;AASD,IAAA,YATC,wBASY,QATZ,EASoC;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAd,gBAAA,MAAc,0EAAL,GAAK;AAAA;AAAA,uBACD,QAAQ,CAAC,GAAT,CAAa,cAAb,EAA6B;AACnE,kBAAA,MAAM,EAAE,MAD2D;AAEnE,kBAAA,KAAK,EACH,qBACA,QAAQ,CAAC,QADT,GAEA,GAFA,GAGA,QAAQ,CAAC,SAHT,GAIA;AAPiE,iBAA7B,CADC;;AAAA;AAAA;AAC3B,gBAAA,QAD2B,uBACjC,IADiC;AACjB,gBAAA,KADiB,uBACjB,KADiB;;AAAA,qBAWrC,KAXqC;AAAA;AAAA;AAAA;;AAYvC,gBAAA,OAAO,CAAC,GAAR,CAAY,OAAZ,EAAqB,KAArB;AAZuC;;AAAA;AAAA,sBAgBrC,QAAO,KAAM,IAhBwB;AAAA;AAAA;AAAA;;AAiBvC,gBAAA,QAAQ,CAAC,KAAT,GAAiB,EAAjB;AAjBuC;;AAAA;AAqBzC,gBAAA,KAAI,CAAC,KAAL,GAAa,QAAb;;AACA,gBAAA,KAAI,CAAC,KAAL,CAAW,OAAX,CAAmB,UAAC,IAAD,EAAU;AAC3B,kBAAA,IAAI,CAAC,MAAL,GAAc,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAhB,CAAd;AACD,iBAFD;;AAtByC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyB1C;AAlCM;AArBI,CAAf","sourcesContent":["<template>\n  <div class=\"my-1\">\n    <p>You're at : {{ coords.latitude }}, {{ coords.longitude }}</p>\n    <!-- <input type=\"text\" class=\"form-control my-3\" placeholder=\"Search\" /> -->\n    <label class=\"float-end\"> looking in {{ radii }} KMs radius </label>\n    <input\n      type=\"range\"\n      class=\"form-range\"\n      min=\"2\"\n      max=\"102\"\n      step=\"10\"\n      id=\"kmsRange\"\n      v-model=\"radii\"\n      @change=\"radiusChange\"\n    />\n \n\n    <div v-if=\"items.length > 0\">\n      <h4 class=\"text-secondary mb-3\">Found following things around you</h4>\n      <div v-for=\"item in items\" :key=\"item.id\">\n        <ListingCard :loc=\"item\" :showDeleteBtn=\"false\" :showActionBtn=\"true\"/>\n      </div>\n    </div>\n\n    <div v-else>\n      <div class=\"alert alert-warning text-center\" role=\"alert\">\n        <h5>Sorry ! No listings found aroud you.</h5>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { supabase } from \"../supabase\";\nimport ListingCard from \"./ListingCard.vue\";\n\nexport default {\n  name: \"GetUserListings\",\n  components: {\n    ListingCard,\n  },\n  data() {\n    return {\n      navigatorError: false,\n      coords: {},\n      items: [],\n      radii: 20,\n    };\n  },\n  created() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.showPosition);\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  },\n\n  methods: {\n    radiusChange() {\n      console.log(this.radii);\n      this.getLocations(this.coords, this.radii);\n    },\n    showPosition(position) {\n      this.coords = position.coords;\n      this.getLocations(this.coords, 100);\n    },\n    async getLocations(position, radius = 100) {\n      const { data: listings, error } = await supabase.rpc(\"get_listings\", {\n        radius: radius,\n        point:\n          \"SRID=4326;POINT(\" +\n          position.latitude +\n          \" \" +\n          position.longitude +\n          \")\",\n      });\n\n      if (error) {\n        console.log(\"error\", error);\n        return;\n      }\n\n      if (listings === null) {\n        listings.value = [];\n        return;\n      }\n\n      this.items = listings;\n      this.items.forEach((item) => {\n        item.coords = JSON.parse(item.coords);\n      })\n    },\n  },\n};\n</script>\n\n<style scoped>\n</style>\n"],"sourceRoot":""}]}