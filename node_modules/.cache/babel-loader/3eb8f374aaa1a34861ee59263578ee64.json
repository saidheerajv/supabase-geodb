{"remainingRequest":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/thread-loader/dist/cjs.js!/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/babel-loader/lib/index.js!/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/src/components/GetLocations.vue?vue&type=template&id=7d7b0b94","dependencies":[{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/src/components/GetLocations.vue","mtime":1633877247975},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1632349277000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/vue-loader-v16/dist/index.js","mtime":1632349277000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgdG9EaXNwbGF5U3RyaW5nIGFzIF90b0Rpc3BsYXlTdHJpbmcsIGNyZWF0ZUVsZW1lbnRWTm9kZSBhcyBfY3JlYXRlRWxlbWVudFZOb2RlLCB2TW9kZWxUZXh0IGFzIF92TW9kZWxUZXh0LCB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIHJlbmRlckxpc3QgYXMgX3JlbmRlckxpc3QsIEZyYWdtZW50IGFzIF9GcmFnbWVudCwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jayBhcyBfY3JlYXRlRWxlbWVudEJsb2NrLCByZXNvbHZlQ29tcG9uZW50IGFzIF9yZXNvbHZlQ29tcG9uZW50LCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIGNyZWF0ZUNvbW1lbnRWTm9kZSBhcyBfY3JlYXRlQ29tbWVudFZOb2RlIH0gZnJvbSAidnVlIjsKdmFyIF9ob2lzdGVkXzEgPSB7CiAgY2xhc3M6ICJteS0xIgp9OwoKdmFyIF9ob2lzdGVkXzIgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaW5wdXQiLCB7CiAgdHlwZTogInRleHQiLAogIGNsYXNzOiAiZm9ybS1jb250cm9sIG15LTMiLAogIHBsYWNlaG9sZGVyOiAiU2VhcmNoIgp9LCBudWxsLCAtMSk7Cgp2YXIgX2hvaXN0ZWRfMyA9IHsKICBjbGFzczogImZsb2F0LWVuZCIKfTsKCnZhciBfaG9pc3RlZF80ID0gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoImhyIiwgbnVsbCwgbnVsbCwgLTEpOwoKdmFyIF9ob2lzdGVkXzUgPSB7CiAga2V5OiAwCn07Cgp2YXIgX2hvaXN0ZWRfNiA9IC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJoMiIsIG51bGwsICJGb3VuZCBmb2xsb3dpbmcgdGhpbmdzIGFyb3VuZCB5b3UgIiwgLTEpOwoKdmFyIF9ob2lzdGVkXzcgPSB7CiAga2V5OiAxCn07Cgp2YXIgX2hvaXN0ZWRfOCA9IC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCB7CiAgY2xhc3M6ICJhbGVydCBhbGVydC13YXJuaW5nIHRleHQtY2VudGVyIiwKICByb2xlOiAiYWxlcnQiCn0sIFsvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaDUiLCBudWxsLCAiU29ycnkgISBObyBsaXN0aW5ncyBmb3VuZCBhcm91ZCB5b3UuIildLCAtMSk7Cgp2YXIgX2hvaXN0ZWRfOSA9IFtfaG9pc3RlZF84XTsKZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICB2YXIgX2NvbXBvbmVudF9Mb2NhdGlvbkNhcmQgPSBfcmVzb2x2ZUNvbXBvbmVudCgiTG9jYXRpb25DYXJkIik7CgogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soImRpdiIsIF9ob2lzdGVkXzEsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJwIiwgbnVsbCwgIllvdSdyZSBhdCA6ICIgKyBfdG9EaXNwbGF5U3RyaW5nKCRkYXRhLmNvb3Jkcy5sYXRpdHVkZSkgKyAiLCAiICsgX3RvRGlzcGxheVN0cmluZygkZGF0YS5jb29yZHMubG9uZ2l0dWRlKSwgMSksIF9ob2lzdGVkXzIsIF9jcmVhdGVFbGVtZW50Vk5vZGUoImxhYmVsIiwgX2hvaXN0ZWRfMywgIiBTZWFyY2hpbmcgaW4iICsgX3RvRGlzcGxheVN0cmluZygkZGF0YS5yYWRpaSkgKyAiS01zIHJhZGl1cyAiLCAxKSwgX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVFbGVtZW50Vk5vZGUoImlucHV0IiwgewogICAgdHlwZTogInJhbmdlIiwKICAgIGNsYXNzOiAiZm9ybS1yYW5nZSIsCiAgICBtaW46ICIyIiwKICAgIG1heDogIjEwMCIsCiAgICBzdGVwOiAiMTAiLAogICAgaWQ6ICJrbXNSYW5nZSIsCiAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVswXSB8fCAoX2NhY2hlWzBdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICByZXR1cm4gJGRhdGEucmFkaWkgPSAkZXZlbnQ7CiAgICB9KSwKICAgIG9uQ2hhbmdlOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuICRvcHRpb25zLnJhZGl1c0NoYW5nZSAmJiAkb3B0aW9ucy5yYWRpdXNDaGFuZ2UuYXBwbHkoJG9wdGlvbnMsIGFyZ3VtZW50cyk7CiAgICB9KQogIH0sIG51bGwsIDU0NCksIFtbX3ZNb2RlbFRleHQsICRkYXRhLnJhZGlpXV0pLCBfaG9pc3RlZF80LCAkZGF0YS5pdGVtcy5sZW5ndGggPiAwID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygiZGl2IiwgX2hvaXN0ZWRfNSwgW19ob2lzdGVkXzYsIChfb3BlbkJsb2NrKHRydWUpLCBfY3JlYXRlRWxlbWVudEJsb2NrKF9GcmFnbWVudCwgbnVsbCwgX3JlbmRlckxpc3QoJGRhdGEuaXRlbXMsIGZ1bmN0aW9uIChpdGVtKSB7CiAgICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKCJkaXYiLCB7CiAgICAgIGtleTogaXRlbS5pZAogICAgfSwgW19jcmVhdGVWTm9kZShfY29tcG9uZW50X0xvY2F0aW9uQ2FyZCwgewogICAgICBsb2M6IGl0ZW0KICAgIH0sIG51bGwsIDgsIFsibG9jIl0pXSk7CiAgfSksIDEyOCkpXSkpIDogKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygiZGl2IiwgX2hvaXN0ZWRfNywgX2hvaXN0ZWRfOSkpXSk7Cn0="},{"version":3,"sources":["/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/src/components/GetLocations.vue"],"names":[],"mappings":";;AACO,EAAA,KAAK,EAAC;;;8BAET,mBAAA,CAAoE,OAApE,EAAoE;AAA7D,EAAA,IAAI,EAAC,MAAwD;AAAjD,EAAA,KAAK,EAAC,mBAA2C;AAAvB,EAAA,WAAW,EAAC;AAAW,CAApE,E,IAAA,E,EAAA,C;;;AACO,EAAA,KAAK,EAAC;;;8BAWb,mBAAA,CAAM,IAAN,EAAM,IAAN,EAAM,IAAN,EAAM,CAAA,CAAN,C;;;;;;8BAGE,mBAAA,CAA2C,IAA3C,EAA2C,IAA3C,EAAI,oCAAJ,EAAsC,CAAA,CAAtC,C;;;;;;8BAOA,mBAAA,CAEM,KAFN,EAEM;AAFD,EAAA,KAAK,EAAC,iCAEL;AAFuC,EAAA,IAAI,EAAC;AAE5C,CAFN,E,cACE,mBAAA,CAA6C,IAA7C,EAA6C,IAA7C,EAAI,sCAAJ,C,CADF,E,EAAA,C;;kBAAA,U;;;;uBAxBJ,mBAAA,CA4BM,KA5BN,EAAA,UAAA,EA4BM,CA3BJ,mBAAA,CAAgE,GAAhE,EAAgE,IAAhE,EAAG,iBAAY,gBAAA,CAAG,KAAA,CAAA,MAAA,CAAO,QAAV,CAAZ,GAAiC,IAAjC,GAAmC,gBAAA,CAAG,KAAA,CAAA,MAAA,CAAO,SAAV,CAAtC,EAAyD,CAAzD,CA2BI,EA1BJ,UA0BI,EAzBJ,mBAAA,CAAoE,OAApE,EAAA,UAAA,EAAyB,kBAAa,gBAAA,CAAG,KAAA,CAAA,KAAH,CAAb,GAAwB,aAAjD,EAA4D,CAA5D,CAyBI,E,gBAxBJ,mBAAA,CASE,OATF,EASE;AARA,IAAA,IAAI,EAAC,OAQL;AAPA,IAAA,KAAK,EAAC,YAON;AANA,IAAA,GAAG,EAAC,GAMJ;AALA,IAAA,GAAG,EAAC,KAKJ;AAJA,IAAA,IAAI,EAAC,IAIL;AAHA,IAAA,EAAE,EAAC,UAGH;;aAFS,KAAA,CAAA,K,GAAK,M;MAEd;AADC,IAAA,QAAM,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,YAAA,IAAA,QAAA,CAAA,YAAA,OAAA,QAAA,YAAF;AAAA,KAAA;AACP,GATF,E,IAAA,E,GAAA,C,iBAOW,KAAA,CAAA,K,GAiBP,EAdJ,UAcI,EAZO,KAAA,CAAA,KAAA,CAAM,MAAN,GAAY,C,kBAAvB,mBAAA,CAKM,KALN,EAKM,UALN,EAKM,CAJJ,UAII,G,kBAHJ,mBAAA,CAEM,SAFN,EAEM,IAFN,EAEM,WAAA,CAFc,KAAA,CAAA,KAEd,EAFmB,UAAb,IAAa,EAAT;yBAAhB,mBAAA,CAEM,KAFN,EAEM;AAFsB,MAAA,GAAG,EAAE,IAAI,CAAC;AAEhC,KAFN,E,CACE,YAAA,CAA4B,uBAA5B,EAA4B;AAAb,MAAA,GAAG,EAAE;AAAQ,KAA5B,EAAwB,IAAxB,EAAwB,CAAxB,EAAwB,CAAA,KAAA,CAAxB,C,CADF,C;GAEM,CAFN,E,GAAA,CAGI,EALN,C,mBAOA,mBAAA,CAIM,KAJN,EAIM,UAJN,EAIM,UAJN,C,CAKI,CA5BN,C","sourcesContent":["<template>\n  <div class=\"my-1\">\n    <p>You're at : {{ coords.latitude }}, {{ coords.longitude }}</p>\n    <input type=\"text\" class=\"form-control my-3\" placeholder=\"Search\" />\n    <label class=\"float-end\"> Searching in{{ radii }}KMs radius </label>\n    <input\n      type=\"range\"\n      class=\"form-range\"\n      min=\"2\"\n      max=\"100\"\n      step=\"10\"\n      id=\"kmsRange\"\n      v-model=\"radii\"\n      @change=\"radiusChange\"\n    />\n    <hr />\n\n    <div v-if=\"items.length > 0\">\n      <h2>Found following things around you </h2>\n      <div v-for=\"item in items\" :key=\"item.id\">\n        <LocationCard :loc=\"item\" />\n      </div>\n    </div>\n\n    <div v-else>\n      <div class=\"alert alert-warning text-center\" role=\"alert\">\n        <h5>Sorry ! No listings found aroud you.</h5>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { supabase } from \"../supabase\";\nimport LocationCard from \"./LocationCard.vue\";\n\nexport default {\n  name: \"GetUserListings\",\n  components: {\n    LocationCard,\n  },\n  data() {\n    return {\n      navigatorError: false,\n      coords: {},\n      items: [],\n      radii: 20,\n    };\n  },\n  created() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.showPosition);\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  },\n\n  methods: {\n    radiusChange() {\n      console.log(this.radii);\n      this.getLocations(this.coords, this.radii);\n    },\n    showPosition(position) {\n      this.coords = position.coords;\n      this.getLocations(this.coords, 100);\n    },\n    async getLocations(position, radius = 100) {\n      const { data: listings, error } = await supabase.rpc(\n        \"get_all_locations\",\n        {\n          radius: radius,\n          point:\n            \"SRID=4326;POINT(\" +\n            position.latitude +\n            \" \" +\n            position.longitude +\n            \")\",\n        }\n      );\n\n      if (error) {\n        console.log(\"error\", error);\n        return;\n      }\n\n      // handle for when no todos are returned\n      if (listings === null) {\n        listings.value = [];\n        return;\n      }\n\n      this.items = listings;\n    },\n  },\n};\n</script>\n\n<style scoped>\n</style>\n"],"sourceRoot":""}]}