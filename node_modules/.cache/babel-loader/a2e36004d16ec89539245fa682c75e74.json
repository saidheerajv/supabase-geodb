{"remainingRequest":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/babel-loader/lib/index.js!/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/src/components/PostLocation.vue?vue&type=template&id=e41363b6","dependencies":[{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/src/components/PostLocation.vue","mtime":1633470851574},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1632349277000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/vue-loader-v16/dist/index.js","mtime":1632349277000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbi5qcyI7CmltcG9ydCB7IGNyZWF0ZUVsZW1lbnRWTm9kZSBhcyBfY3JlYXRlRWxlbWVudFZOb2RlLCB2TW9kZWxUZXh0IGFzIF92TW9kZWxUZXh0LCB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jayB9IGZyb20gInZ1ZSI7CnZhciBfaG9pc3RlZF8xID0gewogIGNsYXNzOiAiIgp9OwoKdmFyIF9ob2lzdGVkXzIgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaDIiLCBudWxsLCAiUG9zdCBMb2NhdGlvbiIsIC0xCi8qIEhPSVNURUQgKi8KKTsKCnZhciBfaG9pc3RlZF8zID0gewogIGNsYXNzOiAidGV4dC1lbmQiCn07CmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7CiAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygiZGl2IiwgX2hvaXN0ZWRfMSwgW19ob2lzdGVkXzIsIF93aXRoRGlyZWN0aXZlcyhfY3JlYXRlRWxlbWVudFZOb2RlKCJpbnB1dCIsIHsKICAgIGNsYXNzOiAiZm9ybS1jb250cm9sIG15LTIiLAogICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbMF0gfHwgKF9jYWNoZVswXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgcmV0dXJuICRkYXRhLm5hbWUgPSAkZXZlbnQ7CiAgICB9KSwKICAgIHBsYWNlaG9sZGVyOiAiRW50ZXIgbmFtZSIKICB9LCBudWxsLCA1MTIKICAvKiBORUVEX1BBVENIICovCiAgKSwgW1tfdk1vZGVsVGV4dCwgJGRhdGEubmFtZV1dKSwgX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVFbGVtZW50Vk5vZGUoImlucHV0IiwgewogICAgY2xhc3M6ICJmb3JtLWNvbnRyb2wgbXktMiIsCiAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVsxXSB8fCAoX2NhY2hlWzFdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICByZXR1cm4gJGRhdGEubG9jX3N0cmluZyA9ICRldmVudDsKICAgIH0pLAogICAgcGxhY2Vob2xkZXI6ICJQYXN0ZSBnb29nbGUgbWFwcyB1cmwiCiAgfSwgbnVsbCwgNTEyCiAgLyogTkVFRF9QQVRDSCAqLwogICksIFtbX3ZNb2RlbFRleHQsICRkYXRhLmxvY19zdHJpbmddXSksIF93aXRoRGlyZWN0aXZlcyhfY3JlYXRlRWxlbWVudFZOb2RlKCJ0ZXh0YXJlYSIsIHsKICAgIGNsYXNzOiAiZm9ybS1jb250cm9sIG15LTIiLAogICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbMl0gfHwgKF9jYWNoZVsyXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgcmV0dXJuICRkYXRhLmRlc2NyaXB0aW9uID0gJGV2ZW50OwogICAgfSksCiAgICBwbGFjZWhvbGRlcjogIkRlc2NyaXB0aW9uIgogIH0sICJcbiAgICAiLCA1MTIKICAvKiBORUVEX1BBVENIICovCiAgKSwgW1tfdk1vZGVsVGV4dCwgJGRhdGEuZGVzY3JpcHRpb25dXSksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzMsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJidXR0b24iLCB7CiAgICBjbGFzczogImJ0biBidG4tcHJpbWFyeSBtLTIgZmxvYXQtcmlnaHQiLAogICAgb25DbGljazogX2NhY2hlWzNdIHx8IChfY2FjaGVbM10gPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiAkb3B0aW9ucy5wb3N0TG9jYXRpb24gJiYgJG9wdGlvbnMucG9zdExvY2F0aW9uLmFwcGx5KCRvcHRpb25zLCBhcmd1bWVudHMpOwogICAgfSkKICB9LCAiIFBPU1QgIildKV0pOwp9"},{"version":3,"sources":["/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/src/components/PostLocation.vue"],"names":[],"mappings":";;;;;AACO,EAAA,KAAK,EAAC;;;8BACT,mBAAA,CAAsB,IAAtB,EAAsB,IAAtB,EAAI,eAAJ,EAAiB,CAAA;AAAA;AAAjB,C;;;AAiBK,EAAA,KAAK,EAAC;;;uBAlBb,mBAAA,CAuBM,KAvBN,EAAA,UAAA,EAuBM,CAtBJ,UAsBI,E,gBApBJ,mBAAA,CAA2E,OAA3E,EAA2E;AAApE,IAAA,KAAK,EAAC,mBAA8D;;aAAjC,KAAA,CAAA,I,GAAI,M;MAA6B;AAA3B,IAAA,WAAW,EAAC;AAAe,GAA3E,E,IAAA,E;;AAAA,G,iBAA0C,KAAA,CAAA,I,GAoBtC,E,gBAlBJ,mBAAA,CAIE,OAJF,EAIE;AAHA,IAAA,KAAK,EAAC,mBAGN;;aAFS,KAAA,CAAA,U,GAAU,M;MAEnB;AADA,IAAA,WAAW,EAAC;AACZ,GAJF,E,IAAA,E;;AAAA,G,iBAEW,KAAA,CAAA,U,GAgBP,E,gBAZJ,mBAAA,CAKW,UALX,EAKW;AAJT,IAAA,KAAK,EAAC,mBAIG;;aAHA,KAAA,CAAA,W,GAAW,M;MAGX;AAFT,IAAA,WAAW,EAAC;AAEH,GALX,EAIC,QAJD,EAKA;AAAA;AALA,G,EAKA,C,cAHW,KAAA,CAAA,W,CAGX,C,CAOI,EALJ,mBAAA,CAIM,KAJN,EAAA,UAAA,EAIM,CAHJ,mBAAA,CAES,QAFT,EAES;AAFD,IAAA,KAAK,EAAC,iCAEL;AAFwC,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,YAAA,IAAA,QAAA,CAAA,YAAA,OAAA,QAAA,YAAF;AAAA,KAAA;AAE7C,GAFT,EAAsE,QAAtE,CAGI,CAJN,CAKI,CAvBN,C","sourcesContent":["<template>\n  <div class=\"\">\n    <h2>Post Location</h2>\n\n    <input class=\"form-control my-2\" v-model=\"name\" placeholder=\"Enter name\" />\n\n    <input\n      class=\"form-control my-2\"\n      v-model=\"loc_string\"\n      placeholder=\"Paste google maps url\"\n    />\n\n    <textarea\n      class=\"form-control my-2\"\n      v-model=\"description\"\n      placeholder=\"Description\"\n    >\n    </textarea>\n\n    <div class=\"text-end\">\n      <button class=\"btn btn-primary m-2 float-right\" @click=\"postLocation\">\n        POST\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { supabase } from \"../supabase\";\nexport default {\n  name: \"PostLocation\",\n  data() {\n    return {\n      name: \"\",\n      loc_string: \"\",\n      description: \"\",\n    };\n  },\n  methods: {\n    async postLocation() {\n      console.log(this.name);\n\n      let coords = this.getLatLong(this.loc_string);\n      // let d = new Date();\n\n      let inserObj = {\n        name: this.name,\n        location: \"SRID=4326;POINT(\" + coords.lat + \" \" + coords.long + \")\",\n        description: this.description,\n        tags: \"xyz abc\",\n        coords: JSON.stringify(coords),\n        // created_at : d.getTime()\n      };\n\n      console.log(data);\n\n      const { data, error } = await supabase\n        .from(\"all_locations\")\n        .insert([inserObj])\n        .single();\n\n      console.log(data, error);\n    },\n\n    getLatLong(str) {\n      var patt1 = /[+-]?\\d+(\\.\\d+)?/g;\n      var result = str.match(patt1);\n      result = result.filter((item) => {\n        return item.length > 4 && item.includes(\".\");\n      });\n\n      return { lat: result[0], long: result[1] };\n    },\n  },\n};\n</script>\n\n\n<style scoped>\n</style>\n"],"sourceRoot":""}]}