{"remainingRequest":"/home/dheeraj/Desktop/new-supa/supabase-geodb/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/dheeraj/Desktop/new-supa/supabase-geodb/src/components/GetUserListings.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/dheeraj/Desktop/new-supa/supabase-geodb/src/components/GetUserListings.vue","mtime":1633903654119},{"path":"/home/dheeraj/Desktop/new-supa/supabase-geodb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dheeraj/Desktop/new-supa/supabase-geodb/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/dheeraj/Desktop/new-supa/supabase-geodb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dheeraj/Desktop/new-supa/supabase-geodb/node_modules/vue-loader-v16/dist/index.js","mtime":1632349277000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB7IHN1cGFiYXNlIH0gZnJvbSAiLi4vc3VwYWJhc2UiOwppbXBvcnQgTGlzdGluZ0NhcmQgZnJvbSAiLi9MaXN0aW5nQ2FyZC52dWUiOwppbXBvcnQgeyBzdG9yZSB9IGZyb20gIi4uL3N0b3JlIjsKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiR2V0VXNlckxpc3RpbmdzIiwKICBjb21wb25lbnRzOiB7CiAgICBMaXN0aW5nQ2FyZCwKICB9LAogICBjcmVhdGVkKCkgewoKICAgIHRoaXMuZ2V0VXNlckxpc3RpbmdzKHN0b3JlLnVzZXIuaWQpOwogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIG5hdmlnYXRvckVycm9yOiBmYWxzZSwKICAgICAgY29vcmRzOiB7fSwKICAgICAgaXRlbXM6IFtdLAogICAgICByYWRpaTogMjAsCiAgICB9OwogIH0sCgogIG1ldGhvZHM6IHsKICAgIGFzeW5jIGdldFVzZXJMaXN0aW5ncyh1c2VySWQpIHsKICAgICAgCiAgICAgIGNvbnN0IHsgZGF0YTogbGlzdGluZ3MsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZQogICAgICAgIC5mcm9tKCJhbGxfbG9jYXRpb25zIikKICAgICAgICAuc2VsZWN0KCkKICAgICAgICAuZXEoJ2FkZGVkX2J5Jyx1c2VySWQpOwoKICAgICAgaWYgKGVycm9yKSB7CiAgICAgICAgY29uc29sZS5sb2coImVycm9yIiwgZXJyb3IpOwogICAgICAgIHJldHVybjsKICAgICAgfQogIGNvbnNvbGUubG9nKGxpc3RpbmdzKTsKICAgICAgLy8gaGFuZGxlIGZvciB3aGVuIG5vIHRvZG9zIGFyZSByZXR1cm5lZAogICAgICBpZiAobGlzdGluZ3MgPT09IG51bGwpIHsKICAgICAgICBsaXN0aW5ncy52YWx1ZSA9IFtdOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdGhpcy5pdGVtcyA9IGxpc3RpbmdzOwogICAgfSwKICB9LAp9Owo="},{"version":3,"sources":["/home/dheeraj/Desktop/new-supa/supabase-geodb/src/components/GetUserListings.vue"],"names":[],"mappings":"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","file":"/home/dheeraj/Desktop/new-supa/supabase-geodb/src/components/GetUserListings.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"my-1\">\n    <h3 class=\"text-dark mb-3\">Your Listings</h3>\n    <div v-if=\"items.length > 0\">\n      <div v-for=\"item in items\" :key=\"item.id\">\n        <ListingCard :loc=\"item\" :showDeleteBtn=\"true\" :showActionBtn=\"false\"/>\n      </div>\n    </div>\n\n    <div v-else>\n      <div class=\"alert alert-warning text-center\" role=\"alert\">\n        <h5>You don't have any listings yet!</h5>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { supabase } from \"../supabase\";\nimport ListingCard from \"./ListingCard.vue\";\nimport { store } from \"../store\";\n\nexport default {\n  name: \"GetUserListings\",\n  components: {\n    ListingCard,\n  },\n   created() {\n\n    this.getUserListings(store.user.id);\n  },\n  data() {\n    return {\n      navigatorError: false,\n      coords: {},\n      items: [],\n      radii: 20,\n    };\n  },\n\n  methods: {\n    async getUserListings(userId) {\n      \n      const { data: listings, error } = await supabase\n        .from(\"all_locations\")\n        .select()\n        .eq('added_by',userId);\n\n      if (error) {\n        console.log(\"error\", error);\n        return;\n      }\n  console.log(listings);\n      // handle for when no todos are returned\n      if (listings === null) {\n        listings.value = [];\n        return;\n      }\n\n      this.items = listings;\n    },\n  },\n};\n</script>\n\n<style scoped>\n</style>\n"]}]}