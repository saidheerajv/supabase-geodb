{"remainingRequest":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/src/components/GetLocations.vue?vue&type=template&id=a9f66e50","dependencies":[{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/src/components/GetLocations.vue","mtime":1633644453575},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1632349277000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/node_modules/vue-loader-v16/dist/index.js","mtime":1632349277000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdiBjbGFzcz0ibXktMSI+CiAgICA8cD5Zb3UncmUgIGF0IDoge3sgY29vcmRzLmxhdGl0dWRlIH19LCB7eyBjb29yZHMubG9uZ2l0dWRlIH19PC9wPgogICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgbXktMyIgcGxhY2Vob2xkZXI9IlNlYXJjaCIgLz4KICAgIDxsYWJlbCBjbGFzcz0iZmxvYXQtZW5kIj4ge3sgcmFkaWkgfX08L2xhYmVsPgogICAgPGlucHV0CiAgICAgIHR5cGU9InJhbmdlIgogICAgICBjbGFzcz0iZm9ybS1yYW5nZSIKICAgICAgbWluPSIyIgogICAgICBtYXg9IjEwMCIKICAgICAgc3RlcD0iMTAiCiAgICAgIGlkPSJrbXNSYW5nZSIKICAgICAgdi1tb2RlbD0icmFkaWkiCiAgICAgIEBjaGFuZ2U9InJhZGl1c0NoYW5nZSIKICAgIC8+CiAgICA8aHIgLz4KCiAgICA8ZGl2IHYtaWY9Iml0ZW1zLmxlbmd0aCA+IDAiPgogICAgICA8aDI+c2FzY3VvYmFjbzwvaDI+CiAgICAgIDxkaXYgdi1mb3I9Iml0ZW0gaW4gaXRlbXMiIDprZXk9Iml0ZW0uaWQiPgogICAgICAgIDxMb2NhdGlvbkNhcmQgOmxvYz0iaXRlbSIgLz4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IHYtZWxzZT4KICAgICAgPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtd2FybmluZyB0ZXh0LWNlbnRlciIgcm9sZT0iYWxlcnQiPgogICAgICAgIDxoNT5Tb3JyeSAhIE5vIGxpc3RpbmdzIGZvdW5kIGFyb3VkIHlvdS48L2g1PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgCiAgPC9kaXY+Cg=="},{"version":3,"sources":["/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/src/components/GetLocations.vue"],"names":[],"mappings":"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","file":"/home/dheeraj/Desktop/supa/supabase-geodb/sbgeodb/src/components/GetLocations.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"my-1\">\n    <p>You're  at : {{ coords.latitude }}, {{ coords.longitude }}</p>\n    <input type=\"text\" class=\"form-control my-3\" placeholder=\"Search\" />\n    <label class=\"float-end\"> {{ radii }}</label>\n    <input\n      type=\"range\"\n      class=\"form-range\"\n      min=\"2\"\n      max=\"100\"\n      step=\"10\"\n      id=\"kmsRange\"\n      v-model=\"radii\"\n      @change=\"radiusChange\"\n    />\n    <hr />\n\n    <div v-if=\"items.length > 0\">\n      <h2>sascuobaco</h2>\n      <div v-for=\"item in items\" :key=\"item.id\">\n        <LocationCard :loc=\"item\" />\n      </div>\n    </div>\n\n    <div v-else>\n      <div class=\"alert alert-warning text-center\" role=\"alert\">\n        <h5>Sorry ! No listings found aroud you.</h5>\n      </div>\n    </div>\n    \n  </div>\n</template>\n\n<script>\nimport { supabase } from \"../supabase\";\nimport LocationCard from \"./LocationCard.vue\";\n\n// const listings = [];\n\nexport default {\n  name: \"GetLocations\",\n  components: {\n    LocationCard,\n  },\n  data() {\n    return {\n      navigatorError: false,\n      coords: {},\n      items: [],\n      radii: 20,\n    };\n  },\n  created() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.showPosition);\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  },\n\n  methods: {\n    radiusChange() {\n      console.log(this.radii);\n      this.getLocations(this.coords, this.radii);\n    },\n    showPosition(position) {\n      this.coords = position.coords;\n      this.getLocations(this.coords, 100);\n    },\n    async getLocations(position, radius = 100) {\n     \n     // console.log(position, radius);\n     \n     const { data: listings, error } = await supabase.rpc(\"get_all_locations\", {\n        radius: radius,\n        point:\n          \"SRID=4326;POINT(\" +\n          position.latitude +\n          \" \" +\n          position.longitude +\n          \")\",\n      });\n\n      if (error) {\n        console.log(\"error\", error);\n        return;\n      }\n\n      // handle for when no todos are returned\n      if (listings === null) {\n        listings.value = [];\n        return;\n      }\n      \n      this.items = listings;\n\n    },\n  },\n};\n</script>\n\n<style scoped>\n</style>\n"]}]}